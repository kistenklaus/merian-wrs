#version 460
#extension GL_ARB_shading_language_include : enable

#pragma use_vulkan_memory_model

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;
layout(constant_id = 0) const uint WORKGROUP_SIZE = 512;
layout(constant_id = 1) const uint ROWS = 8;
layout(constant_id = 2) const uint SUBGROUP_SIZE = 32;

#include "subgroup_scan.comp"
#include "block_scan.comp"

#ifdef USE_UINT
#define MONOID uint
#elif defined(USE_FLOAT)
#define MONOID float
#define VEC2 vec2
#else
#define MONOID void
#endif

layout(constant_id = 3) const uint SEQUENTIAL_SCAN_LENGTH = 32;

layout(set = 0, binding = 0) readonly buffer in_Elements {
    MONOID elements[];
};

layout(set = 0, binding = 1) readonly buffer in_Pivot {
    MONOID pivot;
} con;

layout(set = 0, binding = 2) readonly buffer out_BlockCount {
    uint blockHeavyCount[];
};

layout(set = 0, binding = 3) readonly buffer out_HeavyReduction {
    MONOID blockHeavyReductions[];
};

layout(set = 0, binding = 4) readonly buffer out_LightReduction {
    MONOID blockLightReductions[];
};

layout(set = 0, binding = 5) writeonly buffer out_PartitionIndices {
    uint partitionIndices[];
};

layout(set = 0, binding = 6) writeonly buffer out_PartitionPrefix {
    MONOID partitionPrefix[];
};

layout(set = 0, binding = 7) writeonly buffer out_PartitionElements {
    MONOID partitionElements[];
};

layout(push_constant) uniform PushConstant {
    uint N;
} pc;

const uint MAX_SUBGROUPS_PER_WORKGROUP = (WORKGROUP_SIZE + SUBGROUP_SIZE - 1) / SUBGROUP_SIZE;
const uint BLOCK_SIZE = WORKGROUP_SIZE * ROWS;

shared uint sh_blockExclusive;

shared uint strided_scatch[MAX_SUBGROUPS_PER_WORKGROUP];
shared VEC2 strided_scatch2[MAX_SUBGROUPS_PER_WORKGROUP];

void main(void) {
    uint N = pc.N;
    MONOID pivot = con.pivot;

    const uint blockBase = gl_WorkGroupID.x * BLOCK_SIZE;

    uint partCount = blockHeavyCount[gl_WorkGroupID.x];
    VEC2 partPrefix = VEC2(blockHeavyReductions[gl_WorkGroupID.x], blockLightReductions[gl_WorkGroupID.x]);
    // uint partCount = 0;
    // VEC2 partPrefix = VEC2(0, 0);
    uint h[ROWS];
    MONOID v[ROWS];
    VEC2 prefix[ROWS];

    // ============== STRIDED EDGE BLOCK SCAN =================
    #ifdef STRIDED
    const uint base = blockBase + gl_SubgroupID * (ROWS * SUBGROUP_SIZE) + gl_SubgroupInvocationID;

    uint exclusiveCount = 0;
    VEC2 exclusive = VEC2(0, 0);

    #pragma unroll
    for (uint i = 0, ix = base; i < ROWS; ++i, ix += SUBGROUP_SIZE) {
        if (ix < N) {
            v[i] = elements[ix];
        } else {
            v[i] = 0;
        }
    }

    for (uint i = 0, ix = base; i < ROWS; ++i, ix += SUBGROUP_SIZE) {
        const bool condition = v[i] > pivot;
        uint count;
        h[i] = subgroup_exclusive_scan_bool(condition, count) + exclusiveCount;
        exclusiveCount += count;

        VEC2 p = condition ? VEC2(v[i], 0) : VEC2(0, v[i]);
        #ifdef EXCLUSIE
        prefix[i] = subgroupExclusiveAdd(p) + exclusive;
        exclusive += subgroupAdd(p);
        #else
        prefix[i] = subgroupInclusiveAdd(p);
        VEC2 temp = exclusive;
        exclusive += subgroupBroadcast(p, SUBGROUP_SIZE - 1);
        prefix[i] = temp;
        #endif
    }

    const uint last = SUBGROUP_SIZE - 1;
    // for (uint i = 1; i < ROWS; ++i) {
    //     h[i] += subgroupBroadcast(h[i - 1], last);
    // }
    //
    if (gl_SubgroupInvocationID == last) {
        strided_scatch[gl_SubgroupID] = exclusiveCount; // actually inclusive at this point
        strided_scatch2[gl_SubgroupID] = exclusive; // actually inclusive at this point
    }

    barrier();

    if (gl_SubgroupID == 0 && gl_SubgroupInvocationID < MAX_SUBGROUPS_PER_WORKGROUP) {
        uint subgroupCount = strided_scatch[gl_SubgroupInvocationID];
        uint subgroupExclusiveCount = subgroup_inclusive_scan_uint(subgroupCount);
        VEC2 p = strided_scatch2[gl_SubgroupInvocationID];
        VEC2 e = subgroupInclusiveAdd(p);

        strided_scatch[gl_SubgroupInvocationID] = subgroupExclusiveCount;
        strided_scatch2[gl_SubgroupInvocationID] = e;
    }
    barrier();

    uint subgroupCount = partCount;
    VEC2 subgroupPrefix = partPrefix;
    // partCount += strided_scatch[MAX_SUBGROUPS_PER_WORKGROUP - 1];
    // partPrefix += strided_scatch2[MAX_SUBGROUPS_PER_WORKGROUP - 1];

    if (gl_SubgroupID != 0) {
        subgroupCount += strided_scatch[gl_SubgroupID - 1];
        subgroupPrefix += strided_scatch2[gl_SubgroupID - 1];
    }

    for (uint i = 0; i < ROWS; ++i) {
        h[i] += subgroupCount;
        prefix[i] += subgroupPrefix;
    }

    #pragma unroll
    for (uint i = 0, ix = base; i < ROWS; ++i, ix += SUBGROUP_SIZE) {
        if (ix < N) {
            if (v[i] > pivot) { // is heavy
                uint hx = h[i];
                partitionIndices[hx] = ix;
                partitionElements[hx] = v[i];
                partitionPrefix[hx] = prefix[i].x;
            } else {
                uint l = ix - h[i];
                uint lx = (N - 1) - l;
                partitionIndices[lx] = ix;
                partitionElements[lx] = v[i];
                partitionPrefix[lx] = prefix[i].y;
            }
        }
    }

    // =================== NONE STRIDED BLOCK SCAN ===============
    #else

    const uint base = blockBase + gl_LocalInvocationID.x * ROWS;
    #pragma unroll
    for (uint i = 0; i < ROWS; ++i) {
        h[i] = elements[base + i] > pivot ? 1 : 0;
    }

    // thread scan
    uint threadCount = 0;
    #pragma unroll
    for (uint i = 0; i < ROWS; ++i) {
        uint temp = h[i];
        h[i] = threadCount;
        threadCount += temp;
    }

    // block scan
    uint blockCount;

    uint exclusiveCount = block_exclusive_scan_uint(threadCount, blockCount);

    if (gl_LocalInvocationID.x == 0) {
        sh_blockExclusive = partCount;
        partCount += blockCount;
    }
    barrier();
    const uint blockExclusive = sh_blockExclusive;

    exclusiveCount += blockExclusive;

    #pragma unroll
    for (uint i = 0; i < ROWS; ++i) {
        h[i] += exclusiveCount;
    }

    #pragma unroll
    for (uint i = 0; i < ROWS; ++i) {
        indices[base + i] = h[i];
    }
    #endif
}
