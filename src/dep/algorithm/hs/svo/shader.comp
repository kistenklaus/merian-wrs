#version 460

#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_memory_scope_semantics : enable
// #extension GL_EXT_shader_atomic_float : enable
#extension GL_KHR_shader_subgroup_vote : enable
// #extension GL_KHR_shader_subgroup_ballot : enable
#pragma use_vulkan_memory_model

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) readonly buffer in_hst {
    float hst[];
};

layout(set = 0, binding = 1) writeonly buffer out_histogram {
    uint histogram[];
};

layout(push_constant) uniform PushConstant {
    uint S;
    uint regionOffset;
    uint regionSize;
} pc;

shared float scratchHst[gl_WorkGroupSize.x * 2];
shared uint scratchHistogram[gl_WorkGroupSize.x * 2];

// Constants for Philox2x32-10
const uint PHILOX_M2x32 = 0xD256D193u; // Multiplication constant
const uint PHILOX_W32 = 0x9E3779B9u; // Weyl constant
const uint PHILOX_ROUNDS = 10;

// Function to perform a single Philox round
void philoxRound(inout uint x0, inout uint x1, uint k) {
    uint hi = (x0 * PHILOX_M2x32) >> 32; // High 32 bits of multiplication
    uint lo = x0 * PHILOX_M2x32; // Low 32 bits of multiplication

    x0 = hi ^ x1 ^ k;
    x1 = lo;
}

// Philox2x32-10 implementation
void philox2x32_10(inout uint x0, inout uint x1, uint key) {
    uint k = key;
    for (int i = 0; i < PHILOX_ROUNDS; i++) {
        philoxRound(x0, x1, k);
        k += PHILOX_W32; // Update the key with the Weyl constant
    }
}

// Generate a random number using Philox2x32-10
vec2 philoxRandom(uvec2 counter, uint key) {
    uint x0 = counter.x;
    uint x1 = counter.y;

    // Apply 10 rounds of Philox
    philox2x32_10(x0, x1, key);

    // Return a single random number normalized to [0, 1)
    return vec2(float(x0) / 4294967296.0, float(x1) / 4294967296.0); // Normalize to [0, 1)
}

// // Random number generator
// float rand(uint seed) {
//     seed ^= seed >> 21;
//     seed ^= seed << 35;
//     seed ^= seed >> 4;
//     return fract(float(seed) * 1.0 / 4294967296.0);
// }
// Logarithm of factorial using Stirling's Approximation
// float logFactorial(uint n) {
//     if (n == 0 || n == 1) return 0.0; // log(0!) = log(1!) = 0
//     float nf = float(n);
//     return nf * log(nf) - nf + 0.5 * log(2.0 * 3.14159 * nf);
// }
// Log-factorial computation
float logFactorial(uint k) {
    if (k == 0 || k == 1) return 0.0; // log(0!) = log(1!) = 0
    float result = 0.0;
    for (uint i = 2; i <= k; i++) {
        result += log(float(i));
    }
    return result;
}

// Binomial PMF: Computes P(X = k) for Binomial(n, p)
float binomialPMF(uint k, uint n, float p) {
    float logCoeff = logFactorial(n) - logFactorial(k) - logFactorial(n - k);
    float logProb = k * log(p) + (n - k) * log(1.0 - p);
    return exp(logCoeff + logProb);
}

// Normal Approximation Sampling (Large n)
uint approximationSampling(uint n, float p, inout uvec2 counter, uint seed) {
    float mean = n * p;
    float stddev = sqrt(n * p * (1.0 - p));

    vec2 rng = philoxRandom(counter, seed);
    counter.y += 1;
    float z = sqrt(-2.0 * log(rng.x)) * cos(6.283185 * rng.y); // Box-Muller transform for normal
    float candidate = mean + stddev * z;

    // Clamp to valid binomial range
    return uint(clamp(round(candidate), 0.0, float(n)));
}

// Rejection sampling for Binomial distribution
uint rejectionSampling(float p, uint n, inout uvec2 counter, uint seed) {
    uint k; // Candidate sample
    float u; // Random number for acceptance check
    float ratio; // Acceptance ratio
    uint maxIter = 100; // Prevent infinite loops in extreme cases
    uint iter = 0;

    while (iter < maxIter) {
        // Increment seed to ensure new random values

        vec2 u = philoxRandom(counter, seed);
        counter.y += 1;

        // Generate a proposal sample (uniform distribution as proposal)
        k = uint(u.x * float(n + 1)); // Candidate in [0, n]

        // Compute the acceptance ratio
        ratio = binomialPMF(k, n, p) / (1.0 / float(n + 1)); // Uniform proposal density

        // Accept or reject the candidate
        if (u.y <= ratio) {
            return k; // Return accepted sample
        }

        iter++;
    }

    // Fallback: If too many iterations, return a default value
    return n / 2; // Return an approximate value (mean of Binomial)
}

// uint approximationSampling(uint n, float p, uvec2 counter, uint seed) {
uint sampleBinomial(float p, uint n, inout uvec2 counter, uint seed) {
    if (n < 0) {
        return rejectionSampling(p, n, counter, seed);
    } else {
        return approximationSampling(n, p, counter, seed ) ;
}
}

void main(void) {
    const uint invocID = gl_LocalInvocationID.x;
    // coalessed read hst to shared.
    float w = 0.0f;
    if (invocID < pc.regionSize) {
        w = hst[pc.regionOffset + invocID];
    }
    scratchHst[invocID] = w;
    if (invocID == gl_WorkGroupSize.x - 1) {
        scratchHistogram[gl_WorkGroupSize.x * 2 - 2] = pc.S;
    }
    barrier();

    // Build HST
    uint offset = 0;
    uint size = pc.regionSize;
    for (uint shift = gl_WorkGroupSize.x >> 1; shift > 0; shift >>= 1) {
        float w1;
        float w2;
        if (invocID < shift) {
            // NOTE: Assumes that the workgroup size if a power of 2!
            w1 = scratchHst[offset + invocID];
            w2 = scratchHst[offset + invocID + shift];
        }
        offset += shift * 2;
        if (invocID < shift) {
            scratchHst[offset + invocID] = w1 + w2;
        }
        barrier();
    }

    uvec2 counter = uvec2(gl_LocalInvocationID.x, 0);
    uint seed = 12345u;
    for (uint shift = 1; shift <= gl_WorkGroupSize.x; shift <<= 1) {
        uint n;
        if (invocID < shift) {
            n = scratchHistogram[offset + invocID];
        }
        offset -= shift << 1;
        if (invocID < shift) {
            float w1 = scratchHst[offset + invocID];
            float w2 = scratchHst[offset + invocID + shift];
            float w = w1 + w2;
            float p = w1 / w;
            uint s = sampleBinomial(p, n, counter, seed);
            scratchHistogram[offset + invocID] = s;
            scratchHistogram[offset + invocID + shift] = n - s;
        }
        barrier();
    }

    histogram[invocID + pc.regionOffset] = uint(scratchHistogram[invocID]);
}
