#version 460

#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_shader_atomic_float : enable
#extension GL_KHR_shader_subgroup_vote : enable
// #extension GL_KHR_shader_subgroup_ballot : enable
#pragma use_vulkan_memory_model

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;
layout(constant_id = 0) const uint WORKGROUP_SIZE = 512;
layout(constant_id = 1) const uint ROWS = 8;
layout(constant_id = 2) const uint SUBGROUP_SIZE = 32;

const uint PARTITION_SIZE = WORKGROUP_SIZE * ROWS;
const uint SUBPARTITION_SIZE = SUBGROUP_SIZE * ROWS;
const uint MAX_NUMBER_OF_SUBGROUPS = (WORKGROUP_SIZE + SUBGROUP_SIZE - 1) / SUBGROUP_SIZE;

layout(set = 0, binding = 0) readonly buffer in_weights {
    float elements[];
};

layout(set = 0, binding = 1) buffer out_mean {
    float mean;
};

layout(push_constant) uniform PushConstant {
    uint N;
} pc;


shared float sh_subgroupAggregates[MAX_NUMBER_OF_SUBGROUPS];

float computeLocalReduction(uint base, uint N) {
    float threadAgg = 0;
    for (uint i = 0; i < ROWS; ++i) {
        uint index = base + i * SUBGROUP_SIZE;
        if (index < N) {
            threadAgg += elements[index];
        }
    }
    float subgroupAgg = subgroupAdd(threadAgg);
    if (subgroupElect()) {
        sh_subgroupAggregates[gl_SubgroupID] = subgroupAgg;
    }
    barrier();

    float workgroupAgg;
    if (SUBGROUP_SIZE >= MAX_NUMBER_OF_SUBGROUPS) {
        if (gl_SubgroupID == 0) {
            if (gl_SubgroupInvocationID < MAX_NUMBER_OF_SUBGROUPS) {
                workgroupAgg = subgroupAdd(sh_subgroupAggregates[gl_SubgroupInvocationID]);
                if (subgroupElect()) {
                    sh_subgroupAggregates[0] = workgroupAgg;
                }
            }
        }
        subgroupBarrier();
        barrier();
        workgroupAgg = sh_subgroupAggregates[0];
    } else {
        workgroupAgg = 123123123;
    }

    return workgroupAgg;
}


void main(void) {
    const uint gid = gl_GlobalInvocationID.x;
    const uint invocID = gl_LocalInvocationID.x;

    const uint base = gl_WorkGroupID.x * PARTITION_SIZE + gl_SubgroupID.x * SUBPARTITION_SIZE + gl_SubgroupInvocationID.x;

    const float localSum = computeLocalReduction(base, pc.N);
  
    if (gl_LocalInvocationID.x == 0) {
      uint elementsInPartition = PARTITION_SIZE;
      float localMean = localSum / pc.N;
      atomicAdd(mean, localMean);
    }
}
    
