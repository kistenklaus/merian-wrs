#version 460

#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_memory_scope_semantics : enable
// #extension GL_EXT_shader_atomic_float : enable
#extension GL_KHR_shader_subgroup_vote : enable
// #extension GL_KHR_shader_subgroup_ballot : enable
#pragma use_vulkan_memory_model

#define monoid float
#define state_t uint
#define lbstate_t uint

layout(constant_id = 0) const uint GROUP_SIZE = 1;
layout(constant_id = 1) const uint SUBGROUP_SIZE = 1;
layout(constant_id = 2) const uint ROWS = 1;
const uint PARTITION_SIZE = GROUP_SIZE * ROWS;
const uint SUBGROUP_COUNT = (GROUP_SIZE + SUBGROUP_SIZE - 1) / SUBGROUP_SIZE;
layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

#define STATE_NO_AGGREGATE 0u
#define STATE_AGGREGATE 1u
#define STATE_PREFIX 2u
#define STATE_DONT_CARE 3u

struct BatchDescriptor {
    uint heavyCount;
    uint heavyCountInclusivePrefix;
    monoid heavySum;
    monoid heavyInclusivePrefix;
    state_t state;
};

layout(set = 0, binding = 0) readonly buffer in_values {
    monoid weights[];
};

layout(set = 0, binding = 1) writeonly buffer out_partition {
    uint heavyCount;
    monoid heavyLightPartition[];
};

layout(set = 0, binding = 2) writeonly buffer out_prefix {
    monoid heavyLightPrefix[];
};

layout(set = 0, binding = 3) coherent buffer batch_descriptors {
    uint atomicBatchCounter;
    BatchDescriptor batchInfo[];
};

layout(set = 0, binding = 4) readonly buffer partition_predicate {
    monoid pivot;
} predicate;

layout(push_constant) uniform PushConstant {
    uint size;
} pc;

#define LOOK_BACK_STATE_SPIN 1u
#define LOOK_BACK_STATE_DONE 0u

shared uint sh_lookBackState;
shared uint sh_groupID;

shared uint sh_batchHeavyCountPrefix;
shared uint sh_heavyCountScratch[GROUP_SIZE + 1];

shared monoid sh_batchHeavyPrefix;
shared monoid sh_heavyScratch[GROUP_SIZE];

#define ATOMIC_LOOK_BACK_STATE
#define ATOMIC_PARTITION_STATE

bool partitionPredicate(in monoid v, in monoid pivot) {
    // return true;
    return v > pivot;
}

uint partitionPredicateU(in monoid v, in monoid pivot) {
    return partitionPredicate(v, pivot) ? 1 : 0;
}

monoid localWeights[ROWS];
monoid localHeavyPrefix[ROWS];
bool localIsHeavy[ROWS];
uint localHeavyCountExclusivePrefix[ROWS];

void main(void) {
    const monoid pivot = predicate.pivot;

    const uint invocID = gl_LocalInvocationID.x;
    const uint subInvocID = gl_SubgroupInvocationID.x;
    const uint subgroupID = gl_SubgroupID.x;
    const uint subgroupCount = gl_NumSubgroups.x;
    const uint subgroupSize = gl_SubgroupSize.x;
    const uint lookBackMaxStepSize = min(subgroupSize, 32);
    if (invocID == 0) {
        sh_groupID = atomicAdd(atomicBatchCounter, 1);
    }

    controlBarrier(gl_ScopeWorkgroup, gl_ScopeWorkgroup, gl_StorageSemanticsShared, gl_SemanticsAcquireRelease);

    uint batchID = sh_groupID;
    uint ix = batchID * PARTITION_SIZE + invocID * ROWS;
    bool seqInvoc = invocID == gl_WorkGroupSize.x - 1;
    bool seqSubgroup = subgroupID == subgroupCount - 1;

    for (uint i = 0; i < ROWS; ++i) {
        localWeights[i] = weights[ix + i];
        localIsHeavy[i] = partitionPredicate(localWeights[i], pivot);
    }

    localHeavyPrefix[0] = localWeights[0];
    for (uint i = 1; i < ROWS; ++i) {
      localHeavyPrefix[i] = localHeavyPrefix[i - 1] + localWeights[i];
    }
    monoid localHeavySum = localHeavyPrefix[ROWS - 1];
    

    if (invocID == 0) {
      sh_heavyScratch[invocID] = localHeavySum;
    }

    monoid batchHeavySum = localHeavySum;

    // 1. Step calculate local index exclusive prefix
    localHeavyCountExclusivePrefix[0] = 0;
    for (uint i = 0; i < ROWS - 1; ++i) {
        localHeavyCountExclusivePrefix[i + 1] = localHeavyCountExclusivePrefix[i] + (localIsHeavy[i] ? 1 : 0);
    }
    const uint localHeavyCount = localHeavyCountExclusivePrefix[ROWS - 1] + (localIsHeavy[ROWS - 1] ? 1 : 0);

    sh_heavyCountScratch[invocID + 1] = localHeavyCount;
    if (invocID == 0) {
        sh_heavyCountScratch[0] = 0;
    }

    uint batchHeavyCount = localHeavyCount;

    // 1.1 Workgroup exclusive prefix sum over rows
    for (uint shift = 1; shift <= (GROUP_SIZE >> 1); shift <<= 1) {
        barrier();
        if (invocID >= shift) {
            uint otherHeavyCount = sh_heavyCountScratch[invocID - shift + 1];
            batchHeavyCount += otherHeavyCount;

            monoid otherHeavySum = sh_heavyScratch[invocID - shift];
            batchHeavySum += otherHeavySum;
        }
        barrier();
        sh_heavyCountScratch[invocID + 1] = batchHeavyCount;
        sh_heavyScratch[invocID] = batchHeavySum;
    }

    // 2. Publish Aggregate and state
    // 2.1 Publish aggregate
    if (gl_LocalInvocationID.x == gl_WorkGroupSize.x - 1) {
        batchInfo[batchID].heavyCount = batchHeavyCount;
        batchInfo[batchID].heavySum = batchHeavySum;
        if (batchID == 0) {
            batchInfo[batchID].heavyCountInclusivePrefix = batchHeavyCount;
            batchInfo[batchID].heavyInclusivePrefix = batchHeavySum;
        }
    }

    // memoryBarrierBuffer();

    if (gl_LocalInvocationID.x == gl_WorkGroupSize.x - 1) {
        state_t state = STATE_AGGREGATE;
        if (batchID == 0) {
            state = STATE_PREFIX;
        }
        atomicStore(batchInfo[batchID].state, state, gl_ScopeQueueFamily,
            gl_StorageSemanticsBuffer, gl_SemanticsRelease);
    }

    uint batchHeavyCountPrefix = 0;
    monoid batchHeavySumExclusivePrefix = 0.0f;
    if (batchID != 0) {
        lbstate_t lookBackIndex = batchID - 1;
        sh_lookBackState = LOOK_BACK_STATE_SPIN;
        while (true) {
            state_t lookBatchState;
            if (gl_LocalInvocationID.x == gl_WorkGroupSize.x - 1) {
                lookBatchState = atomicLoad(batchInfo[lookBackIndex].state, gl_ScopeQueueFamily,
                        gl_StorageSemanticsBuffer, gl_SemanticsAcquire | gl_SemanticsMakeVisible);
                if (lookBatchState == STATE_AGGREGATE) {
                    batchHeavyCountPrefix += batchInfo[lookBackIndex].heavyCount;
                    batchHeavySumExclusivePrefix += batchInfo[lookBackIndex].heavySum;
                    lookBackIndex--;
                    sh_lookBackState = LOOK_BACK_STATE_SPIN;
                } else if (lookBatchState == STATE_PREFIX) {
                    batchHeavyCountPrefix += batchInfo[lookBackIndex].heavyCountInclusivePrefix;
                    batchHeavySumExclusivePrefix += batchInfo[lookBackIndex].heavyCountInclusivePrefix;
                    sh_lookBackState = LOOK_BACK_STATE_DONE;
                } else if (lookBatchState == STATE_NO_AGGREGATE) {
                    sh_lookBackState = LOOK_BACK_STATE_SPIN;
                }
            }
            barrier();
            lookBatchState = sh_lookBackState;
            if (lookBatchState == LOOK_BACK_STATE_DONE) {
                break;
            }
        }

        if (gl_LocalInvocationID.x == gl_WorkGroupSize.x - 1) {
            sh_batchHeavyCountPrefix = batchHeavyCountPrefix;
            sh_batchHeavyPrefix = batchHeavySumExclusivePrefix;
            batchInfo[batchID].heavyCountInclusivePrefix = batchHeavyCountPrefix + batchHeavyCount;
            batchInfo[batchID].heavyInclusivePrefix = batchHeavySumExclusivePrefix + batchHeavySum;
        }

        controlBarrier(gl_ScopeWorkgroup, gl_ScopeQueueFamily, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared,
            gl_SemanticsAcquireRelease);

        if (gl_LocalInvocationID.x == gl_WorkGroupSize.x - 1) {
            atomicStore(batchInfo[batchID].state, STATE_PREFIX,
                gl_ScopeQueueFamily, gl_StorageSemanticsBuffer, gl_SemanticsRelease | gl_SemanticsMakeAvailable);
        } else {
            batchHeavyCountPrefix = sh_batchHeavyCountPrefix;
            batchHeavySumExclusivePrefix = sh_batchHeavyPrefix;
        }
    }

    uint rowHeavyCountExclusivePrefix = batchHeavyCountPrefix;
    monoid rowHeavyExclusivePrefixSum = batchHeavySumExclusivePrefix;
    if (invocID > 0) {
        rowHeavyCountExclusivePrefix += sh_heavyCountScratch[invocID];
        rowHeavyExclusivePrefixSum += sh_heavyScratch[invocID - 1];
    }
    for (uint i = 0; i < ROWS; ++i) {
        if (ix + i < pc.size) {
            uint h = rowHeavyCountExclusivePrefix + localHeavyCountExclusivePrefix[i]; //flagged element prefix
            uint index = h;
            if (!localIsHeavy[i]) {
                uint l = (ix + i) - h; // unflagged element prefix
                index = (pc.size - 1) - l;
            }
            heavyLightPartition[index] = localWeights[i];
            heavyLightPrefix[index] = localWeights[i] + rowHeavyExclusivePrefixSum;
        }
    }
    if (batchID == gl_NumWorkGroups.x - 1) {
        if (gl_LocalInvocationID.x == GROUP_SIZE - 1) {
            heavyCount = rowHeavyCountExclusivePrefix
                    + localHeavyCountExclusivePrefix[ROWS - 1];
        }
    }
}
