#version 460

#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_memory_scope_semantics : enable
// #extension GL_EXT_shader_atomic_float : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_shuffle_relative : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_shuffle : enable

#pragma use_vulkan_memory_model

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;
layout(constant_id = 0) const uint WORKGROUP_SIZE = 512;
layout(constant_id = 1) const uint ROWS = 8;
layout(constant_id = 2) const uint SUBGROUP_SIZE = 32;
const uint MAX_SUBGROUPS_PER_WORKGROUP = (WORKGROUP_SIZE + SUBGROUP_SIZE - 1) / SUBGROUP_SIZE;

layout(constant_id = 3) const uint VARIANT = 8;

layout(constant_id = 4) const uint SEQUENTIAL_SCAN_LENGTH = 32;

layout(constant_id = 5) const uint PARALLEL_LOOKBACK_DEPTH = 32;

const uint WRITE_BLOCK_REDUCTIONS = 1;

const uint VARIANT_WORKGROUP_MASK = (0xFF);
const uint VARIANT_WORKGROUP_SUBGROUP_SCAN = (0x1);

const uint VARIANT_SUBGROUP_MASK = (0xFF00);
const uint VARIANT_SUBGROUP_INTRINSIC = (0x100);
const uint VARIANT_SUBGROUP_HILLIS_STEEL = (0x200);

const uint SUBGROUP_VARIANT = VARIANT & VARIANT_SUBGROUP_MASK;

const uint WORKGROUP_VARIANT = VARIANT & VARIANT_WORKGROUP_MASK;

layout(set = 0, binding = 0) readonly buffer in_elements {
    float elements[];
};

layout(set = 0, binding = 1) writeonly buffer out_prefixSum {
    float prefixSum[];
};

// enum State BEGIN
#define state_t uint
const state_t STATE_NOT_READY = 0;
const state_t STATE_AGGREGATE_PUBLISHED = 1;
const state_t STATE_PREFIX_PUBLISHED = 2;
// END

struct DecoupledState {
    float aggregate;
    float prefix;
    state_t state;
};

layout(set = 0, binding = 2) coherent buffer DecoupledStates {
    uint counter;
    DecoupledState partitions[];
};

layout(push_constant) uniform PushConstant {
    uint N;
} pc;

const uint BLOCK_SIZE = (WORKGROUP_SIZE * 2) * ROWS;
const uint STRIDE = BLOCK_SIZE >> 1;

uint N;

uint ax;
float a[SEQUENTIAL_SCAN_LENGTH][ROWS];

uint bx;
float b[SEQUENTIAL_SCAN_LENGTH][ROWS];

void globalMemoryRead(uint blockID, out float[ROWS] a, out float[ROWS] b) {
    uint aBase = blockID * BLOCK_SIZE + gl_LocalInvocationID.x * ROWS;
    ax = gl_SubgroupID;
    if ((aBase + ROWS <= N)) {
        #pragma unroll
        for (uint i = 0; i < ROWS; ++i) {
            a[i] = elements[aBase + i];
        }
    } else {
        for (uint i = 0; i < ROWS; ++i) {
            uint ix = aBase + i;
            if (ix < N) {
                a[i] = elements[ix];
            } else {
                a[i] = 0;
            }
        }
    }
    uint bBase = aBase + STRIDE;
    bx = MAX_SUBGROUPS_PER_WORKGROUP + gl_SubgroupID;
    if ((bBase + ROWS <= N)) {
        #pragma unroll
        for (uint i = 0; i < ROWS; ++i) {
            b[i] = elements[bBase + i];
        }
    } else {
        for (uint i = 0; i < ROWS; ++i) {
            uint ix = bBase + i;
            if (ix < N) {
                b[i] = elements[ix];
            } else {
                b[i] = 0;
            }
        }
    }
}

void globalMemoryWrite(uint blockID, in float[ROWS] a, in float[ROWS] b) {
    uint aBase = blockID * BLOCK_SIZE + gl_LocalInvocationID.x * ROWS;
    if (aBase + ROWS <= N) {
        #pragma unroll
        for (uint i = 0; i < ROWS; ++i) {
            prefixSum[aBase + i] = a[i];
        }
    } else {
        for (uint i = 0; i < ROWS; ++i) {
            uint ix = aBase + i;
            if (ix < N) {
                prefixSum[ix] = a[i];
            }
        }
    }
    uint bBase = aBase + STRIDE;
    if (bBase + ROWS <= N) {
        #pragma unroll
        for (uint i = 0; i < ROWS; ++i) {
            prefixSum[bBase + i] = b[i];
        }
    } else {
        for (uint i = 0; i < ROWS; ++i) {
            uint ix = bBase + i;
            if (ix < N) {
                prefixSum[ix] = b[i];
            }
        }
    }
}

void invocationScan2(out vec2 aggregate, inout float[ROWS] a, inout float[ROWS] b) {
    for (uint i = 1; i < ROWS; ++i) {
        a[i] += a[i - 1];
        b[i] += b[i - 1];
    }
    aggregate = vec2(a[ROWS - 1], b[ROWS - 1]);
}

void subgroupIntrinsicScan2(in vec2 ab, out vec2 exclusive, out vec2 aggregate) {
    exclusive = subgroupExclusiveAdd(ab);
    aggregate = subgroupBroadcast(ab + exclusive, SUBGROUP_SIZE - 1);
}

void subgroupHillisSteel2(in vec2 ab, out vec2 exclusive, out vec2 aggregate) {
    const uint subInvoc = gl_SubgroupInvocationID;
    vec2 x1 = ab;
    #pragma unroll
    for (uint shift = 1; shift < SUBGROUP_SIZE; shift <<= 1) {
        vec2 x2 = subgroupShuffleUp(x1, shift);
        if (subInvoc >= shift) {
            x1 += x2;
        }
    }
    aggregate = subgroupBroadcast(x1, SUBGROUP_SIZE - 1);
    vec2 previous = subgroupShuffleUp(x1, 1);
    if (subInvoc == 0) {
        exclusive = vec2(0, 0);
    } else {
        exclusive = previous;
    }
}

void subgroupScan2(in vec2 ab, out vec2 exclusive, out vec2 aggregate) {
    if /* constexpr */ (SUBGROUP_VARIANT == VARIANT_SUBGROUP_INTRINSIC) {
        subgroupIntrinsicScan2(ab, exclusive, aggregate);
    } else if /* constexpr */ (SUBGROUP_VARIANT == VARIANT_SUBGROUP_HILLIS_STEEL) {
        subgroupHillisSteel2(ab, exclusive, aggregate);
    }
}

void subgroupIntrinsicScan(in float x, out float exclusive, out float aggregate) {
    float v = x;
    const float ex = subgroupExclusiveAdd(v);
    exclusive = ex;
    // FIXME: this is not really clean code.
    aggregate = subgroupBroadcast(ex + v, (MAX_SUBGROUPS_PER_WORKGROUP << 1) - 1);
}

void subgroupHillisSteel(in float x, out float exclusive, out float aggregate) {
    const uint subInvoc = gl_SubgroupInvocationID;
    float x1 = x;
    #pragma unroll
    for (uint shift = 1; shift < SUBGROUP_SIZE; shift <<= 1) {
        float x2 = subgroupShuffleUp(x1, shift);
        if (subInvoc >= shift) {
            x1 += x2;
        }
    }
    // FIXME: this is not really clean code.
    aggregate = subgroupBroadcast(x1, (MAX_SUBGROUPS_PER_WORKGROUP << 1) - 1);
    subgroupBarrier();
    float previous = subgroupShuffleUp(x1, 1);
    if (subInvoc == 0) {
        exclusive = 0;
    } else {
        exclusive = previous;
    }
}

void subgroupScan(in float ab, out float exclusive, out float aggregate) {
    if /* constexpr */ (SUBGROUP_VARIANT == VARIANT_SUBGROUP_INTRINSIC) {
        subgroupIntrinsicScan(ab, exclusive, aggregate);
    } else if /* constexpr */ (SUBGROUP_VARIANT == VARIANT_SUBGROUP_HILLIS_STEEL) {
        subgroupHillisSteel(ab, exclusive, aggregate);
    }
}

const uint n = MAX_SUBGROUPS_PER_WORKGROUP * 2 + 1;
shared float scatch[n];
shared float sh_workgroupAggregate;

void workgroupScanWithSubgroupScan(in vec2 ab, out vec2 exclusive, out float aggregate) {
    if (subgroupElect()) {
        scatch[ax] = ab.x;
        scatch[bx] = ab.y;
    }

    barrier();

    if (gl_SubgroupID == 0) {
        float x = gl_SubgroupInvocationID < n ? scatch[gl_SubgroupInvocationID] : 0.0f;
        float subgroupExclusive = 0;
        float workgroupAggregate = 0;
        subgroupScan(x, subgroupExclusive, workgroupAggregate);
        if (gl_SubgroupInvocationID < n) {
            scatch[gl_SubgroupInvocationID] = subgroupExclusive;
        }
        if /* constexpr */ ((WRITE_BLOCK_REDUCTIONS != 0) || (SEQUENTIAL_SCAN_LENGTH > 1)) {
            if (subgroupElect()) {
                sh_workgroupAggregate = workgroupAggregate;
            }
        }
    }
    barrier();
    exclusive.x = scatch[ax];
    exclusive.y = scatch[bx];
    if /* constexpr */ ((WRITE_BLOCK_REDUCTIONS != 0) || (SEQUENTIAL_SCAN_LENGTH > 1)) {
        aggregate = sh_workgroupAggregate;
    }
}

void workgroupScan(in vec2 ab, out vec2 exclusive, out float aggregate) {
    if /* constexpr */ (WORKGROUP_VARIANT == VARIANT_WORKGROUP_SUBGROUP_SCAN) {
        workgroupScanWithSubgroupScan(ab, exclusive, aggregate);
    } else {
        exclusive = vec2(69, 420);
        aggregate = 42;
    }
}

void combineScans(vec2 exclusive, inout float[ROWS] a, inout float[ROWS] b) {
    #pragma unroll
    for (uint i = 0; i < ROWS; ++i) {
        a[i] += exclusive.x;
    }

    #pragma unroll
    for (uint i = 0; i < ROWS; ++i) {
        b[i] += exclusive.y;
    }
}

void sequentialBlockScan(uint blockID, inout float exclusive) {
    uint it = 0;

    globalMemoryRead(blockID, a[it], b[it]);
    vec2 invocationAggregate;
    invocationScan2(invocationAggregate, a[it], b[it]);

    vec2 invocationExclusive;
    vec2 subgroupAggregate;
    subgroupScan2(invocationAggregate, invocationExclusive, subgroupAggregate);

    vec2 subgroupExclusive;
    float workgroupAggregate;
    workgroupScan(subgroupAggregate, subgroupExclusive, workgroupAggregate);

    invocationExclusive += subgroupExclusive + vec2(exclusive, exclusive);
    combineScans(invocationExclusive, a[it], b[it]);

    globalMemoryWrite(blockID, a[it], b[it]);

    if /* constexpr */ ((WRITE_BLOCK_REDUCTIONS != 0) || (SEQUENTIAL_SCAN_LENGTH > 1)) {
        exclusive += workgroupAggregate;
    }
}

void reducePartition(uint partID) {
    const uint partBase = partID * SEQUENTIAL_SCAN_LENGTH;
    for (uint it = 0; it < SEQUENTIAL_SCAN_LENGTH; ++it) {
        const uint blockID = partBase + it;
        globalMemoryRead(blockID, a[it], b[it]);

        // vec2 invocationAggregate;
        // invocationScan2(invocationAggregate, a[it], b[it]);
        //
        // vec2 invocationExclusive;
        // vec2 subgroupAggregate;
        // subgroupScan2(invocationAggregate, invocationExclusive, subgroupAggregate);
        //
        // vec2 subgroupExclusive;
        // float workgroupAggregate;
        // workgroupScan(subgroupAggregate, subgroupExclusive, workgroupAggregate);

        // invocationExclusive += subgroupExclusive + vec2(exclusive, exclusive);
    }
    for (uint it = 0; it < SEQUENTIAL_SCAN_LENGTH; ++it) {
        const uint blockID = partBase + it;
        globalMemoryWrite(blockID, a[it], b[it]);
    }
}

void scanPartition(uint partID) {
    const uint partBase = partID * SEQUENTIAL_SCAN_LENGTH;
    for (uint it = 0; it < SEQUENTIAL_SCAN_LENGTH; ++it) {
        const uint blockID = partBase + it;
        globalMemoryWrite(blockID, a[it], b[it]);
    }
}

void main(void) {
    N = pc.N;
    reducePartition(gl_WorkGroupID.x);
}
