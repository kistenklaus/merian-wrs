#version 460

#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#pragma use_vulkan_memory_model


layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

layout(constant_id = 1) const uint SamplePartitionSize = 4096;

layout(set = 0, binding = 0) readonly buffer in_cmf {
    float cmf[];
};

layout(set = 0, binding = 1) writeonly buffer out_samples {
    uint samples[];
};

layout(push_constant) uniform PushConstant {
    uint N; // weight count
    uint S; // sample count
    uint seed;
} pc;

// Constants for Philox2x32-10
const uint PHILOX_M2x32 = 0xD256D193u; // Multiplication constant
const uint PHILOX_W32 = 0x9E3779B9u; // Weyl constant
const uint PHILOX_ROUNDS = 7;

void philox2x32Round(inout uint x0, inout uint x1, uint k) {
  uint hi;
  uint lo;
  umulExtended(x0, PHILOX_M2x32, hi, lo);
  x0 = x1 ^ hi;
  x1 = lo + k;
}

// Philox2x32-10 implementation
void philox2x32(inout uint x0, inout uint x1, uint key) {
    uint k = key;
    for (int i = 0; i < PHILOX_ROUNDS; i++) {
        philox2x32Round(x0, x1, k);
        k += PHILOX_W32; // Update the key with the Weyl constant
    }
}

// Generate a random number using Philox2x32-10
vec2 philoxRandom(uvec2 counter, uint key) {
    uint x0 = counter.x;
    uint x1 = counter.y;

    // Apply 10 rounds of Philox
    philox2x32(x0, x1, key);

    // Return a single random number normalized to [0, 1)
    return vec2(float(x0) / 4294967296.0, float(x1) / 4294967296.0); // Normalize to [0, 1)
}
void main(void) {
    const uint gid = gl_GlobalInvocationID.x;

    const uint N = pc.N;
    const uint S = pc.S;
    const uint seed = pc.seed;
    if (gid >= S) return;

    const float total = cmf[N - 1];

    // Step 1: Generate shared random number for the subgroup
    float u1;
    if (subgroupElect()) {
        uvec2 counter = uvec2(gl_WorkGroupID.x * gl_NumSubgroups + gl_SubgroupID, 0); // Use subgroup ID for random sample
        uint key = seed;
        u1 = philoxRandom(counter, key).x * total;
    }
    u1 = subgroupBroadcastFirst(u1); // Broadcast u1 to all threads in the subgroup

    // Step 2: Subgroup-Based Cooperative Binary Search with Dynamic Termination
    uint low = 0;
    uint high = N - 1;
    while ((high - low + 1) > SamplePartitionSize) {
        uint range = high - low + 1;
        uint basePartitionSize = range / gl_SubgroupSize;

        uint partitionSize = basePartitionSize;
        uint start = low + gl_SubgroupInvocationID * partitionSize;
        uint end = min(start + partitionSize - 1, high); // Ensure `end` stays within bounds

        // Check if u1 is in this partition
        bool targetIsLowerThanEnd = u1 < cmf[end];
        uvec4 ballot = subgroupBallot(targetIsLowerThanEnd);
        uint partitionId = subgroupBallotFindLSB(ballot);
        low = subgroupBroadcast(start, partitionId);
        high = subgroupBroadcast(end, partitionId);
    }

    // Step 3: Continue Binary Search Independently
    uvec2 counter = uvec2(gl_GlobalInvocationID.x, 0); // Independent counter for each thread
    uint key = seed ^ 0xA9EC5C80; // Independent key for each thread
    float u2 = cmf[low] + philoxRandom(counter, key).x * (cmf[high] - cmf[low]);

    while (low < high) {
        uint mid = (low + high) / 2;
        if (u2 > cmf[mid]) {
            low = mid + 1;
        } else {
            high = mid;
        }
    }

    samples[gid] = low; // Store the final sample
}
