#version 460

#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#pragma use_vulkan_memory_model

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

layout(constant_id = 1) const uint COOPERATIVE_SAMPLE_SIZE = 4096;
layout(constant_id = 2) const bool USE_P_ARRAY_SEARCH = true;

layout(set = 0, binding = 0) readonly buffer in_cmf {
    float cmf[];
};

layout(set = 0, binding = 1) readonly buffer in_GuidingTable {
    uint guidingTable[];
};

layout(set = 0, binding = 2) writeonly buffer out_Samples {
    uint samples[];
};

layout(push_constant) uniform PushConstant {
    uint N; // weight count
    uint S; // sample count
    uint guidingTableSize;
    uint seed;
} pc;

// Constants for Philox2x32-10
const uint PHILOX_M2x32 = 0xD256D193u; // Multiplication constant
const uint PHILOX_W32 = 0x9E3779B9u; // Weyl constant
const uint PHILOX_ROUNDS = 7;

void philox2x32Round(inout uint x0, inout uint x1, uint k) {
    uint hi;
    uint lo;
    umulExtended(x0, PHILOX_M2x32, hi, lo);
    x0 = x1 ^ hi;
    x1 = lo + k;
}

// Philox2x32-10 implementation
void philox2x32(inout uint x0, inout uint x1, uint key) {
    uint k = key;
    for (int i = 0; i < PHILOX_ROUNDS; i++) {
        philox2x32Round(x0, x1, k);
        k += PHILOX_W32; // Update the key with the Weyl constant
    }
}

// Generate a random number using Philox2x32-10
vec2 philoxRandom(uvec2 counter, uint key) {
    uint x0 = counter.x;
    uint x1 = counter.y;

    // Apply 10 rounds of Philox
    philox2x32(x0, x1, key);

    // Return a single random number normalized to [0, 1)
    return vec2(float(x0) / 4294967296.0, float(x1) / 4294967296.0); // Normalize to [0, 1)
}

float wang_hash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return float(seed) / 4294967296.0;
}

float sampleSearchRange(in uvec2 searchRange, uint seed) {
    uvec2 counter = uvec2(gl_WorkGroupID.x * gl_NumSubgroups + gl_SubgroupID, gl_GlobalInvocationID.x); // Use subgroup ID for random sample
    uint key = seed;
    // float u = philoxRandom(counter, key).x;
    float u = wang_hash(key + gl_GlobalInvocationID.x);
    float lowCmf;
    if (searchRange.x > 0) {
        lowCmf = cmf[searchRange.x - 1];
    } else {
        lowCmf = 0;
    }
    float highCmf = cmf[searchRange.y];
    return lowCmf + (highCmf - lowCmf) * u;
}

void binarySearch(inout uvec2 searchRange, float u) {
    while (searchRange.x < searchRange.y) {
        uint mid = (searchRange.x + searchRange.y) / 2;
        if (u > cmf[mid]) {
            searchRange.x = mid + 1;
        } else {
            searchRange.y = mid;
        }
    }
}

void main(void) {
    const uint gid = gl_GlobalInvocationID.x;

    const uint N = pc.N;
    const uint S = pc.S;
    const uint guidingTableSize = pc.guidingTableSize;
    const uint seed = pc.seed;
    if (gid >= S) return;

    uvec2 searchRange = uvec2(0, N - 1);

    float u1; // subgroup wide uniform sample!
    if (subgroupElect()) {
        uvec2 counter = uvec2(gl_WorkGroupID.x * gl_NumSubgroups + gl_SubgroupID, gl_GlobalInvocationID.x); // Use subgroup ID for random sample
        uint key = seed;
        // u1 = philoxRandom(counter, key).x;
        u1 = wang_hash(key + gl_GlobalInvocationID.x);
    }
    u1 = subgroupBroadcastFirst(u1); // Broadcast u1 to all threads in the subgroup

    // cutpoint (narrow search range with guiding table)
    uint lowGuideIdx = min(uint(u1 * guidingTableSize), guidingTableSize - 1); // floors
    searchRange.x = guidingTable[lowGuideIdx]; // low guide
    if (lowGuideIdx != (guidingTableSize - 1)) {
        searchRange.y = guidingTable[lowGuideIdx + 1];
    }

    // Independent inverse transform sampling
    float u2 = sampleSearchRange(searchRange, seed ^ 0x079145147);

    binarySearch(searchRange, u2);

    samples[gid] = searchRange.x; // Store the final sample
}
