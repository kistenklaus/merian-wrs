#version 460
#extension GL_ARB_shading_language_include : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

#pragma use_vulkan_memory_model

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;
layout(constant_id = 0) const uint WORKGROUP_SIZE = 512;
layout(constant_id = 1) const uint ROWS = 8;
layout(constant_id = 2) const uint SUBGROUP_SIZE = 32;

#ifdef USE_UINT
#define MONOID uint
#elif defined(USE_FLOAT)
#define MONOID float
#else
#define MONOID void
#endif

layout(set = 0, binding = 0) readonly buffer in_Elements {
    MONOID elements[];
};

layout(set = 0, binding = 1) readonly buffer in_Pivot {
    MONOID pivot;
} con;

layout(set = 0, binding = 2) writeonly buffer out_BlockCount {
    uint blockHeavyCount[];
};

layout(set = 0, binding = 3) writeonly buffer out_HeavyReduction {
    MONOID blockHeavyReductions[];
};
layout(set = 0, binding = 4) writeonly buffer out_LightReduction {
    MONOID blockLightReductions[];
};

layout(push_constant) uniform PushConstant {
    uint N;
} pc;

const uint MAX_SUBGROUPS_PER_WORKGROUP = (WORKGROUP_SIZE + SUBGROUP_SIZE - 1) / SUBGROUP_SIZE;
const uint BLOCK_SIZE = WORKGROUP_SIZE * ROWS;
const uint SUBGROUP_BLOCK_SIZE = SUBGROUP_SIZE * ROWS;

shared uint scatch_count[MAX_SUBGROUPS_PER_WORKGROUP];
shared MONOID scatch_heavy[MAX_SUBGROUPS_PER_WORKGROUP];
shared MONOID scatch_light[MAX_SUBGROUPS_PER_WORKGROUP];

void main(void) {
    uint N = pc.N;
    MONOID pivot = con.pivot;

    const uint base = gl_WorkGroupID.x * BLOCK_SIZE + gl_SubgroupID * SUBGROUP_BLOCK_SIZE + gl_SubgroupInvocationID;

    uint heavyCount = 0;
    MONOID heavyAcc = 0;
    MONOID lightAcc = 0;
    for (uint i = 0, ix = base; i < ROWS && ix < N; ++i, ix += SUBGROUP_SIZE) {
        MONOID v = elements[ix];
        if (v > pivot) {
            heavyCount += 1;
            heavyAcc += v;
        } else {
            lightAcc += v;
        }
    }
    uint subgroupHeavyCount = subgroupAdd(heavyCount);
    subgroupBarrier();

    heavyAcc = subgroupAdd(heavyAcc);
    subgroupBarrier();

    lightAcc = subgroupAdd(lightAcc);
    subgroupBarrier();

    if (subgroupElect()) {
        scatch_count[gl_SubgroupID] = subgroupHeavyCount;
        scatch_heavy[gl_SubgroupID] = heavyAcc;
        scatch_light[gl_SubgroupID] = lightAcc;
    }
    barrier();
    if (gl_SubgroupID == 0 && gl_SubgroupInvocationID < MAX_SUBGROUPS_PER_WORKGROUP) {
        uint subgroupCount = scatch_count[gl_SubgroupInvocationID];
        uint workgroupCount = subgroupAdd(subgroupCount);
        subgroupBarrier();
        MONOID h = subgroupAdd(scatch_heavy[gl_SubgroupInvocationID]);
        subgroupBarrier();
        MONOID l = subgroupAdd(scatch_light[gl_SubgroupInvocationID]);
        subgroupBarrier();

        if (subgroupElect()) {
            blockHeavyCount[gl_WorkGroupID.x] = workgroupCount;
            blockHeavyReductions[gl_WorkGroupID.x] = h;
            blockLightReductions[gl_WorkGroupID.x] = l;
        }
    }
}
